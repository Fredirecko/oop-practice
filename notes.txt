Applications of OOP:
programming paradigm used to solve problems. Break down a problem into real world object.  Abstract representation of real world objects that are in the program (i.e. car, bank, patient in hospital). Common topic in interviews. Applications - data science, app development, game development. Used in android/iOS app development.

Advantages of OOP:
Resusability - ability to create instances of classes any number of times (reusing), Maintainability - if you make a change in one object it should not have a great affect on all the other objects thus maintaining order, Easier testing/debugging - ability to find bugs based on a coherent and logical framework, extensibility - , improved design, modularity

Popular languages that support OOP:
python, java, php, c++, c#, kotlin, ruby

Instance:
Instances are objects made from classes. classes act like blueprints. They define categories.  Instances are concrete objects taht are created from the blueprints (classes). If one instance is changed it will not affect the other instance attributes. __init__ is a reserved method and known as a class constructor. It's executed when an instance is created. It initilizes the instance attributes. 

self parameter:
assigns the instance attribute to the instance that is being created (its self). self is used by convention.

class attributes:
Belong to the class and are shared by all the instances. Changing them affects all the instances. Class attributes are usually located before the init method in the class.

Encapsulation:
Bundling of data and methods that act on that data into a single unit called a class. Selectively restrict access to those elements. Protect data as much as possible and restrict access.  

Abstraction:
The interface should be independent of the implementation.  Interface - user's view. Implementation - Developer's view.  Abstracting out common parts of the code to avoid repetition.

Publice attributes vs Private Attributes:
Private attributes use underscores: _private and __more_private (two underscores is more private)

Name Mangling:
When you add a double leading underscore to an attribute you trigger name mangling. You can still acces the attribute but you just need to add the class name with one leading underscore followed by two leading underscores and the attribute name.

Getters and Setters:
Members of a class (Methods). There purpose is to get and set the value of an instance attribute. They protect data by providing an indirect way to access and modify it. 

Getters: 
Access the attribute indirectly. ex: def get_name(self):. get_ + attribute. dog1.get_name().

Setters:
Modify an attribute indirectly. set_ + attribute name.  set_name, set_address, set_age. 

Properties:
The pythonic way to use getters and setters

Property Decorator: Example below using a class House. This illustrates using the @property decorator and setting up the getter and setter.


class House:
	def __init__(self,price):
		self._price = price
	@property
	def price(self):
		print("Getter")
		return self._price
	@price.setter
	def price(self, new_price):
		print("Setter")
		if new_price >0:
			self._price = new_price
		else:
			print("Please enter a valid price")
            
Three methods for using @property:

This is the getter:
class Bus:
 
	def __init__(self, color):
		self._color = color
 
	@property
	def color(self):
		return self._color
        
This is the setter:

class Bus:
 
	def __init__(self, color):
		self._color = color
 
	@property
	def color(self):
		return self._color
 
	@color.setter
	def color(self, new_color):
		self._color = new_color
        
This is the deleter: 

class Bus:
 
	def __init__(self, color):
		self._color = color
 
	@property
	def color(self):
		return self._color
 
	@color.setter
	def color(self, new_color):
		self._color = new_color
 
	@color.deleter
	def color(self):
		del self._color
        
Methods:
Methods = actions within a class.  Closely related to instances. How an object can execute operations and interact with its data. 
The instances access the methods from the class. Method names include verbs since they perform actions.
general syntax: def method_name(self, parameters):
                #body of method
 
id() function:
The id() function is used to return the identity of an object. This is an integer guaranteed to be unique and constant during the lifetime of the object. id's are recycled once an object is deleted. 

is operator and == operator:
When two variable represent the same object in memory. The is operator will return True if the objects represent the same object in memory. The differnece between the is operator and ==: is operator indicates if the variable references the same object in memory while the == operator indicates the same value of the objects. The same value does not imply they are the same object. a = [1] and b =[1] are not the same object but do have the same value. Small integers from [-5,256] are handled diffrently. They will reference the same object even if in different variables. The same is true with strings which are immutable (They must be exculively contained of letters, digits and underscores). Therefore the computer only creates one object for each identical string as long as the are exclusively made of letters, digits and underscores. 







